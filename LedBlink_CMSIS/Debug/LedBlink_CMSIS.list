
LedBlink_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d0  080002d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d0  080002d0  000102d8  2**0
                  CONTENTS
  4 .ARM          00000000  080002d0  080002d0  000102d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d0  080002d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d0  080002d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002d4  080002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002d8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000063d  00000000  00000000  00010301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002aa  00000000  00000000  0001093e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00010be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00010cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001507e  00000000  00000000  00010d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000147d  00000000  00000000  00025dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a99d  00000000  00000000  0002725b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a1bf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  000a1c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080002b8 	.word	0x080002b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080002b8 	.word	0x080002b8

0800014c <delay_1s>:
#include "stm32f1xx.h"

void delay_1s(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    SysTick->LOAD = 8000000 - 1;  // Tính toán Reload value
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <delay_1s+0x34>)
 8000152:	4a0c      	ldr	r2, [pc, #48]	; (8000184 <delay_1s+0x38>)
 8000154:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;                                  // Đặt lại giá trị hiện tại
 8000156:	4b0a      	ldr	r3, [pc, #40]	; (8000180 <delay_1s+0x34>)
 8000158:	2200      	movs	r2, #0
 800015a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x7;                               // Bật timer, chọn sysclk làm nguồn clock, và kích thích ngắt
 800015c:	4b08      	ldr	r3, [pc, #32]	; (8000180 <delay_1s+0x34>)
 800015e:	2207      	movs	r2, #7
 8000160:	601a      	str	r2, [r3, #0]

    while ((SysTick->CTRL & 0x10000) == 0) {
 8000162:	bf00      	nop
 8000164:	4b06      	ldr	r3, [pc, #24]	; (8000180 <delay_1s+0x34>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800016c:	2b00      	cmp	r3, #0
 800016e:	d0f9      	beq.n	8000164 <delay_1s+0x18>
        // Đợi cho đến khi cờ COUNT flag được thiết lập
    }

    SysTick->CTRL = 0;  // Dừng SysTick timer (Enable = 0)
 8000170:	4b03      	ldr	r3, [pc, #12]	; (8000180 <delay_1s+0x34>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
}
 8000176:	bf00      	nop
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	e000e010 	.word	0xe000e010
 8000184:	007a11ff 	.word	0x007a11ff

08000188 <main>:

int main(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;  // Bật clock cho GPIOC
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <main+0x28>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <main+0x28>)
 8000192:	f043 0310 	orr.w	r3, r3, #16
 8000196:	6193      	str	r3, [r2, #24]
    GPIOC->CRH = (GPIOC->CRH & 0xFF0FFFFF) | 0x00200000;  // Cấu hình PC13 làm đầu ra (mode 2)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <main+0x2c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001a0:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <main+0x2c>)
 80001a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001a6:	6053      	str	r3, [r2, #4]

    while (1) {
        delay_1s();  // Chờ 1 giây
 80001a8:	f7ff ffd0 	bl	800014c <delay_1s>
 80001ac:	e7fc      	b.n	80001a8 <main+0x20>
 80001ae:	bf00      	nop
 80001b0:	40021000 	.word	0x40021000
 80001b4:	40011000 	.word	0x40011000

080001b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <NMI_Handler+0x4>

080001be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001be:	b480      	push	{r7}
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001c2:	e7fe      	b.n	80001c2 <HardFault_Handler+0x4>

080001c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <MemManage_Handler+0x4>

080001ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001ca:	b480      	push	{r7}
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001ce:	e7fe      	b.n	80001ce <BusFault_Handler+0x4>

080001d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001d4:	e7fe      	b.n	80001d4 <UsageFault_Handler+0x4>

080001d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001e2:	b480      	push	{r7}
 80001e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001ee:	b480      	push	{r7}
 80001f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
	...

080001fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	 GPIOC->ODR ^= (1 << 13);
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <SysTick_Handler+0x18>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <SysTick_Handler+0x18>)
 8000206:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800020a:	60d3      	str	r3, [r2, #12]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40011000 	.word	0x40011000

08000218 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000224:	f7ff fff8 	bl	8000218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480b      	ldr	r0, [pc, #44]	; (8000258 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800022a:	490c      	ldr	r1, [pc, #48]	; (800025c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800022c:	4a0c      	ldr	r2, [pc, #48]	; (8000260 <LoopFillZerobss+0x16>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a09      	ldr	r2, [pc, #36]	; (8000264 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000240:	4c09      	ldr	r4, [pc, #36]	; (8000268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800024e:	f000 f80f 	bl	8000270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ff99 	bl	8000188 <main>
  bx lr
 8000256:	4770      	bx	lr
  ldr r0, =_sdata
 8000258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800025c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000260:	080002d8 	.word	0x080002d8
  ldr r2, =_sbss
 8000264:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000268:	2000001c 	.word	0x2000001c

0800026c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC1_2_IRQHandler>
	...

08000270 <__libc_init_array>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	2600      	movs	r6, #0
 8000274:	4d0c      	ldr	r5, [pc, #48]	; (80002a8 <__libc_init_array+0x38>)
 8000276:	4c0d      	ldr	r4, [pc, #52]	; (80002ac <__libc_init_array+0x3c>)
 8000278:	1b64      	subs	r4, r4, r5
 800027a:	10a4      	asrs	r4, r4, #2
 800027c:	42a6      	cmp	r6, r4
 800027e:	d109      	bne.n	8000294 <__libc_init_array+0x24>
 8000280:	f000 f81a 	bl	80002b8 <_init>
 8000284:	2600      	movs	r6, #0
 8000286:	4d0a      	ldr	r5, [pc, #40]	; (80002b0 <__libc_init_array+0x40>)
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <__libc_init_array+0x44>)
 800028a:	1b64      	subs	r4, r4, r5
 800028c:	10a4      	asrs	r4, r4, #2
 800028e:	42a6      	cmp	r6, r4
 8000290:	d105      	bne.n	800029e <__libc_init_array+0x2e>
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f855 3b04 	ldr.w	r3, [r5], #4
 8000298:	4798      	blx	r3
 800029a:	3601      	adds	r6, #1
 800029c:	e7ee      	b.n	800027c <__libc_init_array+0xc>
 800029e:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a2:	4798      	blx	r3
 80002a4:	3601      	adds	r6, #1
 80002a6:	e7f2      	b.n	800028e <__libc_init_array+0x1e>
 80002a8:	080002d0 	.word	0x080002d0
 80002ac:	080002d0 	.word	0x080002d0
 80002b0:	080002d0 	.word	0x080002d0
 80002b4:	080002d4 	.word	0x080002d4

080002b8 <_init>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr

080002c4 <_fini>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	bf00      	nop
 80002c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ca:	bc08      	pop	{r3}
 80002cc:	469e      	mov	lr, r3
 80002ce:	4770      	bx	lr
